[{"/Users/soumikpaul/Documents/react-spacex/src/index.js":"1","/Users/soumikpaul/Documents/react-spacex/src/reportWebVitals.js":"2","/Users/soumikpaul/Documents/react-spacex/src/App.js":"3","/Users/soumikpaul/Documents/react-spacex/src/constants/global.js":"4","/Users/soumikpaul/Documents/react-spacex/src/containers/dashboard/Dashboard.js":"5","/Users/soumikpaul/Documents/react-spacex/src/containers/dashboard/CardContainer.js":"6","/Users/soumikpaul/Documents/react-spacex/src/components/RocketDetailsCard.js":"7"},{"size":500,"mtime":1610913792098,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610913792099,"results":"10","hashOfConfig":"9"},{"size":653,"mtime":1610928442966,"results":"11","hashOfConfig":"9"},{"size":272,"mtime":1610921854210,"results":"12","hashOfConfig":"9"},{"size":4939,"mtime":1610949196255,"results":"13","hashOfConfig":"9"},{"size":1211,"mtime":1610950233865,"results":"14","hashOfConfig":"9"},{"size":1798,"mtime":1610949977556,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ralj5p",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/soumikpaul/Documents/react-spacex/src/index.js",[],["32","33"],"/Users/soumikpaul/Documents/react-spacex/src/reportWebVitals.js",[],"/Users/soumikpaul/Documents/react-spacex/src/App.js",[],"/Users/soumikpaul/Documents/react-spacex/src/constants/global.js",[],"/Users/soumikpaul/Documents/react-spacex/src/containers/dashboard/Dashboard.js",["34"],"import React, { useEffect, useState } from \"react\";\nimport { Card, Button, Row, Col } from \"react-bootstrap\";\nimport querystring from \"querystring\";\nimport { globalConstants } from \"../../constants/global\";\nimport { CardContainer } from \"./CardContainer\";\n\nexport const Dashboard = (props) => {\n\n  const [data, setData] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [filters, setFilters] = useState({\n    limit: 150,\n    launch_year: undefined,\n    launch_success: undefined,\n    land_success: undefined,\n  });\n\n  useEffect(() => {\n    fetchAPI(filters);\n  }, []);\n\n  const getUpdatedApiUrl = (filters = {}) => {\n    return globalConstants.API_BASE_URL + querystring.stringify({ ...filters });\n  };\n\n  const fetchAPI = (filters) => {\n    const URL = getUpdatedApiUrl(filters);\n    setIsLoaded(false)\n    setFilters(filters)\n    fetch(URL) // we can use Axios as well\n      .then((response) => response.json())\n      .then((data) => {\n          setIsLoaded(true)\n          setData(data)\n        });\n  };\n\n  const updateApiFilters = (type, value) => {\n    if (filters[type] === value) {\n      value = undefined;\n    }\n    const newFilters = {\n      ...filters,\n      [type]: value,\n    };\n    fetchAPI(newFilters);\n  };\n\n  const uniqueLaunchYears = new Array(16)\n    .fill(0)\n    .map((_, index) => 2006 + index);\n  return (\n    <Row>\n      <Col xs={12} sm={12} md={4} lg={3}>\n        <Card className=\"App-filter-card\">\n          <Card.Body>\n            <Card.Title className=\"App-filter-header\">Filters</Card.Title>\n            <Card.Text className=\"App-filter-heading-launch-year\">\n              Launch Year\n              <hr className=\"App-filters-hr\" />\n            </Card.Text>\n\n            <Row>\n              <div className=\"App-filter-button-container\">\n                {uniqueLaunchYears.map((year) => {\n                  return (\n                    <Button\n                      className=\"App-filter-button\"\n                      variant={\n                        filters.launch_year === year.toString()\n                          ? \"success\"\n                          : \"outline-success\"\n                      }\n                      value={year}\n                      onClick={(e) =>\n                        updateApiFilters(\"launch_year\", e.target.value)\n                      }\n                    >\n                      {year}\n                    </Button>\n                  );\n                })}\n              </div>\n            </Row>\n\n            <Card.Text className=\"App-filter-heading\">\n              Successful Launch\n              <hr className=\"App-filters-hr\" />\n            </Card.Text>\n\n            <div className=\"App-filter-button-container\">\n              <Button\n                className=\"App-filter-button\"\n                variant={\n                  filters.launch_success === \"true\"\n                    ? \"success\"\n                    : \"outline-success\"\n                }\n                onClick={(e) =>\n                  updateApiFilters(\"launch_success\", e.target.value)\n                }\n                value=\"true\"\n              >\n                {globalConstants.TRUE}\n              </Button>\n\n              <Button\n                className=\"App-filter-button\"\n                variant={\n                  filters.launch_success === \"false\"\n                    ? \"success\"\n                    : \"outline-success\"\n                }\n                onClick={(e) =>\n                  updateApiFilters(\"launch_success\", e.target.value)\n                }\n                value=\"false\"\n              >\n                {globalConstants.FALSE}\n              </Button>\n            </div>\n\n            <Card.Text className=\"App-filter-heading\">\n              Successful Landing\n              <hr className=\"App-filters-hr\" />\n            </Card.Text>\n            <div className=\"App-filter-button-container\">\n              <Button\n                className=\"App-filter-button\"\n                variant={\n                  filters.land_success === \"true\"\n                    ? \"success\"\n                    : \"outline-success\"\n                }\n                onClick={(e) =>\n                  updateApiFilters(\"land_success\", e.target.value)\n                }\n                value=\"true\"\n              >\n                {globalConstants.TRUE}\n              </Button>\n\n              <Button\n                className=\"App-filter-button\"\n                variant={\n                  filters.land_success === \"false\"\n                    ? \"success\"\n                    : \"outline-success\"\n                }\n                onClick={(e) =>\n                  updateApiFilters(\"land_success\", e.target.value)\n                }\n                value=\"false\"\n              >\n                {globalConstants.FALSE}\n              </Button>\n            </div>\n          </Card.Body>\n        </Card>\n      </Col>\n      <CardContainer isLoaded={isLoaded} data={data} />\n    </Row>\n  );\n};\n","/Users/soumikpaul/Documents/react-spacex/src/containers/dashboard/CardContainer.js",["35"],"/Users/soumikpaul/Documents/react-spacex/src/components/RocketDetailsCard.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":20,"column":6,"nodeType":"42","endLine":20,"endColumn":8,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":7,"column":3,"nodeType":"46","messageId":"47","endLine":39,"endColumn":4},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchAPI' and 'filters'. Either include them or remove the dependency array.","ArrayExpression",["50"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [fetchAPI, filters]",{"range":"53","text":"54"},[589,591],"[fetchAPI, filters]"]